--------------------------------------------------------------------- CREATING ROLE TABLE ----------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;

create or replace procedure role_table_creation 
IS 
    table_name varchar2(4000);
BEGIN 
    table_name:= 'CREATE TABLE ROLE (
                              role_id NUMBER(16,0) generated by default as identity,
                              role_description VARCHAR2(500),
                              display_name VARCHAR2(50),
                             created_by_id NUMBER(16,0),
                             created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                             PRIMARY KEY (role_id))' ;
     EXECUTE IMMEDIATE table_name;
end role_table_creation;

/
DECLARE 
        t_name varchar2(100);
        row_cnt NUMBER;
    BEGIN
        dbms_output.put_line('-----------------------------------------Firing Role Table Creation Procedure------------------------------------------------------------------');
        t_name:='ROLE';
        select count(*) into row_cnt from user_tables where table_name = t_name;
        dbms_output.put_line(row_cnt);
        IF(row_cnt > 0) THEN
                dbms_output.put_line('Table Role exists');
                dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------');
        ELSE
                BEGIN
                    DBMS_OUTPUT.PUT_LINE('Inside block to create role table');
                    role_table_creation;
                    dbms_output.put_line('Table ROLE is created ');
                    dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------------------');

                END;
        END IF;
        EXCEPTION
            when no_data_found then
                BEGIN
                    role_table_creation;
                    dbms_output.put_line('Table ROLE is created ');
                    dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------------------');
                    
                END;
            when others then
                    dbms_output.put_line(SQLERRM);
                    dbms_output.put_line('Something went wrong in role table creation');
                    dbms_output.put_line('--------------------------------------------------------------------------------------------------------------------------------------------------------');

END;    
/


--------------------------------------------------------------------- OXYGEN CYLINDER PLANT TABLE ----------------------------------------------------------------------------------------

SET SERVEROUTPUT ON;

create or replace procedure oxygen_cylinder_plant_table_creation 
IS 
    table_name varchar2(1000);
BEGIN 
    table_name:= 'CREATE TABLE OXYGEN_CYLINDER_PLANT(
                                      plant_id NUMERIC(20,0),
                                        name VARCHAR2(500),
                                        address VARCHAR2(1000),
                                        phone_number NUMERIC(10,0),
                                        county VARCHAR2(500),
                                        email_id VARCHAR2(500),
                                        created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                        updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                        PRIMARY KEY (plant_id))' ;
     EXECUTE IMMEDIATE table_name;
end oxygen_cylinder_plant_table_creation;

/
DECLARE 
        t_name varchar2(100);
        row_cnt NUMBER;
    BEGIN
        dbms_output.put_line('-----------------------------------------Firing OXygen Cylinder Plant Table Creation Procedure------------------------------------------------------------------');
        t_name:='OXYGEN_CYLINDER_PLANT';
        select count(*) into row_cnt from user_tables where table_name = t_name;
        dbms_output.put_line(row_cnt);
        IF(row_cnt > 0) THEN
                dbms_output.put_line('Table OXygen Cylinder Plant exists');
                dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------');
        ELSE
                BEGIN
                    oxygen_cylinder_plant_table_creation;
                    dbms_output.put_line('Table OXYGEN_CYLINDER_PLANT is created ');
                    dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------------------');
                END;
        END IF;
        EXCEPTION
            when no_data_found then
                BEGIN
                    oxygen_cylinder_plant_table_creation;
                    dbms_output.put_line('Table OXYGEN_CYLINDER_PLANT is created ');
                    dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------------------');
                    
                END;
            when others then
                    dbms_output.put_line('Something went wrong in OXYGEN_CYLINDER_PLANT table creation');
                    dbms_output.put_line('--------------------------------------------------------------------------------------------------------------------------------------------------------');

END; 
/

--------------------------------------------------------------------- OXYGEN CYLINDER DETAILS TABLE ----------------------------------------------------------------------------------------

SET SERVEROUTPUT ON;

create or replace procedure oxygen_cylinder_details_table_creation 
IS 
    table_name varchar2(5000);
BEGIN 
    table_name:= 'CREATE TABLE OXYGEN_CYLINDER_DETAILS (
                              cylinder_id NUMERIC(25,0) generated by default as identity,
                              plant_id NUMERIC(20,0),
                              quantity NUMERIC,
                              available_status NUMERIC(1,0),
                              created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                              updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                              CONSTRAINT OXYGEN_CYLINDER_DETAILS_PK PRIMARY KEY (CYLINDER_ID),
                              CONSTRAINT OXYGEN_CYLINDER_DETAILS_FK_PLANT_ID FOREIGN KEY(PLANT_ID)
                                    REFERENCES OXYGEN_CYLINDER_PLANT(PLANT_ID))' ;     
     EXECUTE IMMEDIATE table_name;
end oxygen_cylinder_details_table_creation;

/
DECLARE 
        t_name varchar2(100);
        row_cnt NUMBER;
    BEGIN
        dbms_output.put_line('-----------------------------------------Firing OXygen Cylinder Details Table Creation Procedure------------------------------------------------------------------');
        t_name:='OXYGEN_CYLINDER_DETAILS';
        select count(*) into row_cnt from user_tables where table_name = t_name;
        dbms_output.put_line(row_cnt);
        IF(row_cnt > 0) THEN
                dbms_output.put_line('Table OXygen Cylinder Details exists');
                dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------');
        ELSE
                BEGIN
                    dbms_output.put_line('Calling method to create oxygen_cylinder_details_table');
                    oxygen_cylinder_details_table_creation;
                    dbms_output.put_line('Table OXYGEN_CYLINDER_DETAILS is created ');
                    dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------------------');
                END;
        END IF;
        EXCEPTION
            when no_data_found then
                BEGIN
                    oxygen_cylinder_details_table_creation;
                    dbms_output.put_line('Table OXYGEN_CYLINDER_DETAILS is created ');
                    dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------------------');
                    
                END;
            when others then
                    dbms_output.put_line(SQLERRM);
                    dbms_output.put_line('Something went wrong in OXYGEN_CYLINDER_DETAILS table creation');
                    dbms_output.put_line('--------------------------------------------------------------------------------------------------------------------------------------------------------');

END; 
/


--------------------------------------------------------------------- PAYMENT STATUS TABLE ----------------------------------------------------------------------------------------

SET SERVEROUTPUT ON;

create or replace procedure payment_status_table_creation 
IS 
    table_name varchar2(1000);
BEGIN 
    table_name:= 'CREATE TABLE PAYMENT_STATUS (
                                  payment_status_code NUMERIC(1,0) generated by default as identity,
                                  status_description VARCHAR2(1500),
                                  created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                  PRIMARY KEY (payment_status_code))' ;     
     EXECUTE IMMEDIATE table_name;
end payment_status_table_creation;

/
DECLARE 
        t_name varchar2(100);
        row_cnt NUMBER;
    BEGIN
        dbms_output.put_line('-----------------------------------------Firing Payment status table Creation Procedure------------------------------------------------------------------');
        t_name:='PAYMENT_STATUS';
        select count(*) into row_cnt from user_tables where table_name = t_name;
        dbms_output.put_line(row_cnt);
        IF(row_cnt > 0) THEN
                dbms_output.put_line('Table payment status exists');
                dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------');
        ELSE
                BEGIN
                    dbms_output.put_line('Calling method to create payment status table');
                    payment_status_table_creation;
                    dbms_output.put_line('Table payment status is created ');
                    dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------------------');

                END;
        END IF;
        EXCEPTION
            when no_data_found then
                BEGIN
                    payment_status_table_creation;
                    dbms_output.put_line('Table Payment statys table is created ');
                    dbms_output.put_line('---------------------------------------------------------------------------------------------------------------------------------------------------------');
                    
                END;
            when others then
                    dbms_output.put_line(SQLERRM);
                    dbms_output.put_line('Something went wrong in Payment status table creation');
                    dbms_output.put_line('--------------------------------------------------------------------------------------------------------------------------------------------------------');

END; 
/



  